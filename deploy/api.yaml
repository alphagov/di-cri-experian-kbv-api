openapi: "3.0.1"
info:
  title: "Experian KBV Wrapper Api"
  version: "1.0"
x-amazon-apigateway-request-validators:
  body:
    validateRequestBody: true
    validateRequestParameters: false
paths:
  /question-request:
    post:
      responses:
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionRequest"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-request-validators: "Validate body"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExperianKbvQuestionRetrievalFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
  /question-answer:
    post:
      responses:
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionAnswerRequest"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "500 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-request-validators: "Validate body"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExperianKbvQuestionAnswerFunction.Arn}/invocations"
        passthroughBehavior: "when_no_match"
components:
  schemas:
    QuestionAnswerRequest:
      type: "object"
      required:
        - urn
        - authRefNo
      properties:
        urn:
          description: Unique Reference Number - supplied to Experian IIQ Soap Webservice a guid which is the ipv-session-id
          maxLength: 36
          type: "string"
        authRefNo:
          description: Experian Reference Number - A unique identifier generated required for an ongoing transaction with Experian
          maxLength: 10
          type: "string"
        questionAnswers:
          type: array
          items:
            $ref: '#/components/schemas/QuestionAnswer'
    QuestionAnswer:
      type: "object"
      required:
        - questionId
        - answer
      properties:
        questionId:
          description: The unique identifier for the question
          maxLength: 6
          type: "string"
        answer:
          description: Answer provided by the user
          maxLength: 50
          type: "string"
    QuestionRequest:
      required:
        - "urn"
        - "personIdentity"
      type: "object"
      properties:
        urn:
          description: Unique Reference Number - Supplied to Experian service and is the ipv-session-id
          maxLength: 36
          type: "string"
        strategy:
          description: Determines the answer to question ratio to success
          maxLength: 25
          type: "string"
          example: "3 out of 4"
        personIdentity:
          $ref: '#/components/schemas/PersonIdentity'
    PersonIdentity:
      type: "object"
      required:
        - title
        - firstName
        - surname
        - dateOfBirth
        - addresses
      properties:
        title:
          maxLength: 10
          type: "string"
        firstName:
          type: "string"
        middleNames:
          type: "string"
        surname:
          maximum: 30
          type: "string"
        dateOfBirth:
          type: "string"
          format: "date"
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/PersonAddress'
    PersonAddress:
      type: "object"
      required:
        - houseName
        - postcode
        - street
        - townCity
      properties:
        houseNumber:
          maxLength: 10
          type: "string"
        houseName:
          maxLength: 50
          type: "string"
        flat:
          maxLength: 30
          type: "string"
        street:
          maxLength: 60
          type: "string"
        townCity:
          maxLength: 30
          type: "string"
        postcode:
          maxLength: 8
          type: "string"
        district:
          maxLength: 35
          type: "string"
        dateMoveOut:
          type: "string"
          format: "date"
        addressType:
          type: "string"
          enum:
            - CURRENT
            - PREVIOUS
    Error:
      title: "Error Schema"
      type: "object"
      properties:
        message:
          type: "string"





